y<-runif(100)
par(pty="s")
plot(x,y,pch=16)
library(spatstat)
#install.packages("spatstat")
library(spatial)
spat.t<-ppp(x, y, c(0,1), c(0,1))
plot(spat.t)
plot(Kest(spat.t))
plot(envelope(spat.t,Kest))
##
# non-random
x1<-c(runif(50))
x2<-seq(0,1,by=0.1)
x3<-runif(15,min=0.1,max=0.2)
y1<-c(runif(50))
y2<-seq(0,1,by=0.1)
y3<-runif(15,min=0.1,max=0.2)
xall<-c(x1,x2,x3)
yall<-c(y1,y2,y3)
par(pty="s")
par(mfrow=c(2,2))
plot(xall,yall,pch=16,xlim=c(0,1),ylim=c(0,1))
plot(x1,y1,pch=16,xlim=c(0,1),ylim=c(0,1))
plot(x2,y2,pch=16,xlim=c(0,1),ylim=c(0,1))
plot(x3,y3,pch=16,xlim=c(0,1),ylim=c(0,1))
spat.t<-ppp(xall, yall, c(0,1), c(0,1))
par(mfrow=c(1,1))
plot(spat.t)
plot(Kest(spat.t))
plot(envelope(spat.t,Kest))
## add serological data
pos<-rpois(100,lambda=15)
neg<-100-pos
tot<-neg+pos
seropos<-pos/tot
#plot(seropos)
marks(spat.t) <- seropos
plot((spat.t),fg='grey',bg="grey",main="",
ylab="Y",'xlab="x')
pos<-seq(from=0.1,to=10,by=0.1)
neg<-100-pos
tot<-neg+pos
seropos<-pos/tot
w<-rlnorm(100,sd=0.5)
Z<-seq(from=0.1,to=10,by=0.1)+w
W<-rev(seq(from=0.1,to=10,by=0.1)+w)
V<-rep(1,100)+w
lin.m<-lm(seropos ~ Z)
summary(lin.m)
plot(seropos,Z)
lin.m<-lm(seropos ~ W)
summary(lin.m)
plot(seropos,W)
lin.m<-lm(seropos ~ V)
summary(lin.m)
plot(seropos,V)
lin.m<-lm(seropos ~ V*W*Z)
summary(lin.m)
marks(spat.t) <- seropos
plot((spat.t),fg='grey',bg="grey",main="",
ylab="Y",'xlab="x')
mean(seropos)
diff<-seropos-mean(seropos)
rbPal <- colorRampPalette(c('blue','red'))
dat<-data.frame(x,y,diff,seropos)
dat$Col <- rbPal(10)[as.numeric(cut(diff,breaks = 10))]
plot(dat$x,dat$y,pch = 20,col = dat$Col,cex=2)
text(dat$x, dat$y, round(dat$diff, 2), cex=0.8)
dat<-data.frame(x,y,diff,seropos,Z)
dat$Col <- rbPal(10)[as.numeric(cut(dat$Z,breaks = 10))]
plot(dat$x,dat$y,pch = 20,col = dat$Col,cex=2)
text(dat$x, dat$y, round(dat$Z, 2), cex=0.8)
plot(dat$Z,dat$seropos)
lmdat<-lm(dat$seropos~dat$Z+dat$y+dat$x)
summary(lmdat)
dat<-data.frame(x,y,diff,seropos,Z)
dat$Col <- rbPal(10)[as.numeric(cut(dat$Z,breaks = 10))]
plot(dat$x,dat$y,pch = 20,col = dat$Col,cex=2)
text(dat$x, dat$y, round(dat$Z, 2), cex=0.8)
plot(dat$Z,dat$seropos)
Z<-seq(from=0.1,to=10,by=0.1)+w
W<-rev(seq(from=0.1,to=10,by=0.1)+w)
V<-rep(1,100)+w
lin.m<-lm(seropos ~ Z)
summary(lin.m)
plot(seropos,Z)
lin.m<-lm(seropos ~ W)
summary(lin.m)
plot(seropos,W)
lin.m<-lm(seropos ~ V)
summary(lin.m)
plot(seropos,V)
lin.m<-lm(seropos ~ V*W*Z)
summary(lin.m)
marks(spat.t) <- seropos
plot((spat.t),fg='grey',bg="grey",main="",
ylab="Y",'xlab="x')
mean(seropos)
diff<-seropos-mean(seropos)
rbPal <- colorRampPalette(c('blue','red'))
dat<-data.frame(x,y,diff,seropos)
dat$Col <- rbPal(10)[as.numeric(cut(diff,breaks = 10))]
plot(dat$x,dat$y,pch = 20,col = dat$Col,cex=2)
text(dat$x, dat$y, round(dat$diff, 2), cex=0.8)
dat$Col <- rbPal(10)[as.numeric(cut(dat$seropos,breaks = 10))]
plot(dat$x,dat$y,pch = 20,col = dat$Col,cex=2)
text(dat$x, dat$y, round(dat$seropos, 2), cex=0.8)
plot(dat$x,dat$y,pch = 20,col = "white",cex=2)
text(dat$x, dat$y, round(dat$seropos, 2), cex=0.8)
plot(dat$x,dat$y,pch = 20,col = "white",cex=2)
text(dat$x, dat$y, round(dat$diff, 2), cex=0.8)
dat<-data.frame(x,y,diff,seropos,Z)
dat$Col <- rbPal(10)[as.numeric(cut(dat$Z,breaks = 10))]
plot(dat$x,dat$y,pch = 20,col = dat$Col,cex=2)
text(dat$x, dat$y, round(dat$Z, 2), cex=0.8)
plot(dat$Z,dat$seropos)
lmdat<-lm(dat$seropos~dat$Z+dat$y+dat$x)
summary(lmdat)
plot(dat$x,dat$y,pch = 20,col = dat$Col,cex=2)
dat$Col <- rbPal(10)[as.numeric(cut(dat$seropos,breaks = 10))]
plot(dat$x,dat$y,pch = 20,col = dat$Col,cex=2)
dat$Col <- rbPal(10)[as.numeric(cut(dat$Z,breaks = 10))]
plot(dat$x,dat$y,pch = 20,col = dat$Col,cex=2)
dat$Col <- rbPal(10)[as.numeric(cut(dat$seropos,breaks = 10))]
plot(dat$x,dat$y,pch = 20,col = dat$Col,cex=2)
rm(list=ls())
a <- 5 # mean - use the same one
s <- 2 # sd
num_tests <- 20
n <- 20 # sample size
xsamples <- matrix(rnorm(num_tests * n, mean=a, sd=s), ncol=num_tests)
par(mfrow=c(1,1))
par(oma=c(0.1,1,0.1,0.2))
par(mar=c(2,5,2,2))
boxplot(xsamples, xlim=c(0,num_tests+1), ylab="data", cex.lab=1.5, xlab="sample number")
abline(h=a, col="red")
xbar <- apply(xsamples, 2, mean)
ci   <- apply(xsamples, 2, function(x) { t.test(x)$conf.int })
plot(xbar, xlim=c(0,num_tests+1), ylim=range(xsamples), pch=19,
ylab="mean (95% confidence intervals)", cex.lab=1.5, xlab="sample number")
abline(h=a, col="red")
for (i in 1:num_tests)
lines(c(i,i), ci[,i])
pvals <- apply(xsamples, 2, function(x) { t.test(x, mu=a)$p.value })
text(1:num_tests, max(ci)+2, round(pvals, 2), srt=90, cex=1.5)
text(0, max(ci)+2, "p-values", srt=90, cex=1.5)
padj<-p.adjust(pvals, method = "bonferroni", n = length(pvals))
text(1:num_tests, min(ci)-2, round(padj, 2), srt=90, cex=1.5)
text(0, min(ci)-2, "adj. p-values", srt=90, cex=1.5)
par(mfrow=c(6,1))
par(oma=c(1,1,0.1,0.2))
par(mar=c(2,5,2,2))
plot(pvals, ylim=c(0,1), pch=16, xlab="", ylab="p-values", cex.lab=1.5)
abline(h=0.05, lty=2)
plot(padj, ylim=c(0,1), pch=16, xlab="", ylab="Bonferroni", cex.lab=1.5)
abline(h=0.05, lty=2)
padj<-p.adjust(pvals, method = "holm", n = length(pvals))
plot(padj, ylim=c(0,1), pch=16, xlab="", ylab="Holm", cex.lab=1.5)
abline(h=0.05, lty=2)
padj<-p.adjust(pvals, method = "hochberg", n = length(pvals))
plot(padj, ylim=c(0,1), pch=16, xlab="", ylab="Hochberg", cex.lab=1.5)
abline(h=0.05, lty=2)
padj<-p.adjust(pvals, method = "BH", n = length(pvals)) # same as fdr
plot(padj, ylim=c(0,1), pch=16, xlab="", ylab="BH", cex.lab=1.5)
abline(h=0.05, lty=2)
padj<-p.adjust(pvals, method = "BY", n = length(pvals)) # same as fdr
plot(padj, ylim=c(0,1), pch=16, ylab="BY", cex.lab=1.5, xlab="sample number")
abline(h=0.05, lty=2)
rm(list=ls())
library(waveslim)
library(dplR)
library(xts)
library(wavelets)
library(wavethresh)
library(gplots)
library(nlme)
install.packages("waveslim")
install.packages(gplots)
install.packages("gplots")
install.packages("wavethresh")
install.packages("wavelets")
rm(list=ls())
library(waveslim)
library(dplR)
library(xts)
library(wavelets)
library(wavethresh)
library(gplots)
library(nlme)
par(mfrow=c(1,1))
par(mar=c(5,5,2,7))
TIME <- 1:1000
w <- rpois(1000, lambda=20)
plot(TIME, w, pch=20)
test <- morlet(w, x1=seq_along(w), p2=NULL, dj=0.25, siglvl=0.95)
wavelet.plot(test)
acf(w, lag.max=length(w), plot=T, main="")
Seasonal <- 3 * sin(2*pi*TIME/100) + 2 * sin(2*pi*TIME/100) #+ 0.1 * sin(2*pi*4*TIME/14) + 0.1 * cos(2*pi*4*TIME/14)
plot(Seasonal, type="l")
x <- Seasonal + w
plot(x, pch=20)
test <- morlet(x, x1=seq_along(x), p2=NULL, dj=0.25, siglvl=0.95)
wavelet.plot(test)
acf(x, lag.max = length(x),plot=T,main="")
kappa = 20 # height
s = 25 # width
omega = 10 # frequency
phi = 0 # offset
t = TIME
peaks <- kappa * (1 / sqrt((1/s)*pi) * exp(-((cos(pi*omega*t/1000 - phi))^2) / (1/s)))
plot(peaks, type="l")
x2 <- peaks + x
plot(x2, pch=20)
test <- morlet(x2, x1=seq_along(x2), p2=NULL, dj=0.25, siglvl=0.95)
wavelet.plot(test)
acf(x2, lag.max = length(x2),plot=T,main="")
trend <- 0.05 * TIME
plot(trend, type="l")
x3 <- trend + x2
plot(x3, pch=20)
test<-morlet(x3, x1 = seq_along(x3), p2 = NULL, dj = 0.25, siglvl = 0.95)
wavelet.plot(test)
acf(x3, lag.max = length(x2),plot=T,main="")
plot(TIME, w, ylim=c(0,350), pch=20, axes='n')
lines(TIME, Seasonal+80)
lines(TIME, peaks+120)
lines(TIME, trend+200)
points(TIME, x3+220, pch=20)
axis(side=4, at=c(20, 80, 150, 230, 300),
labels=c("Random", "Daily", "Periodic", "Trend", "Combined"),
tick=FALSE, las=1)
mtext(side=1, "Time", line=1)
mtext(side=2, "Signal", line=1)
tot <- 300
?stl
stl(TIME)
tot <- 300
spos <- x3
sneg <- tot - x3
sp <- spos / tot
plot(sp, type="l", ylab="Proportion seropositive")
plot(100 * sp, type="l", ylab="Seroprevalence (%)")
res.new <- cbind(round(spos,0), tot, sp)
colnames(res.new)<-c("P","N","Sp")
res.u <- matrix(NA, ncol=2, nrow=1000)
for (ii in 1:1000){
res.u[ii,1] <- binom.test(res.new[ii], res.new[ii+1000])$conf.int[1]
res.u[ii,2] <- binom.test(res.new[ii], res.new[ii+1000])$conf.int[2]
}
res.all <- cbind(res.new, res.u)
colnames(res.all) <- c("P", "N", "Sp", "L", "U")
res.all <- as.data.frame(res.all)
barplot(res.all$Sp, ylim=c(0,1))
barplot2(res.all$Sp, plot.ci=TRUE, ci.l=res.all$L, ci.u=res.all$U,
ylim=c(0,1), main="", ci.lty=2, names.arg=c(1:1000))
barplot2(res.all$Sp[1:10], plot.ci=TRUE, ci.l=res.all$L[1:10], ci.u=res.all$U[1:10],
ylim=c(0,1),main="",ci.lty=2, names.arg=c(1:10))
time.spacing <- c(1,100,150,300,1000)
barplot2(res.all$Sp[time.spacing], plot.ci=TRUE,
ci.l=res.all$L[time.spacing], ci.u=res.all$U[time.spacing],
ylim=c(0,1), main="",ci.lty=2, names.arg=time.spacing)
res.P <- res.all$P[time.spacing]
res.T <- res.all$N[time.spacing]
res.N <- res.T - res.P
res.SP <- res.P / res.T
t <- 1:5
lmres <- lm(res.SP ~ t)
abline(lmres, col="red", lty=2)
prop.test(res.P, res.T) #1
res.data <- cbind(res.P, res.T) #2
chisq.test(res.data)
acf(res.all$Sp, lag.max = length(res.all$Sp), plot=T, main="")
acf(res.SP)
par(mfrow=c(2,4))
every.hundred <- seq(from=1, to=1000, by=100)
acf(res.all$Sp[every.hundred], lag.max = length(res.all$Sp[every.hundred]),
plot=T, main="Autocorrelation every 100")
barplot2(res.all$Sp[every.hundred], plot.ci=TRUE,
ci.l=res.all$L[every.hundred], ci.u=res.all$U[every.hundred],
ylim=c(0,1), main="Sample every 100", ci.lty=2, names.arg=every.hundred)
acf(res.all$Sp[every.hundred], lag.max = length(res.all$Sp[every.hundred]),
plot=T, main="Autocorrelation every 100")
acf(res.all$Sp[every.hundred], lag.max = length(res.all$Sp[every.hundred]),
plot=T, main="Autocorrelation every 100")
barplot2(res.all$Sp[every.hundred], plot.ci=TRUE,
ci.l=res.all$L[every.hundred], ci.u=res.all$U[every.hundred],
ylim=c(0,1), main="Sample every 100", ci.lty=2, names.arg=every.hundred)
lmres<-lm(res.all$Sp[every.hundred] ~ c(1:10))
abline(lmres, col="red", lty=2, lwd=2)
pt <- prop.test(res.all$P[every.hundred], res.all$N[every.hundred])
text(expression(paste(chi^2, "=")), x=length(every.hundred)/2, y=0.8)
text(round(pt$statistic, 0), x=length(every.hundred)/2, y=0.7)
text(expression(paste("p-value =")), x=length(every.hundred)/2, y=0.6)
text(signif(pt$p.value, 2), x=length(every.hundred)/2, y=0.5)
every.ten <- seq(from=1, to=1000, by=10)
acf(res.all$Sp[every.ten], lag.max = length(res.all$Sp[every.ten]),
plot=T, main="Autocorrelation every 10")
barplot2(res.all$Sp[every.ten], plot.ci=TRUE,
ci.l=res.all$L[every.ten], ci.u=res.all$U[every.ten],
ylim=c(0,1), main="Sample every 10", ci.lty=2, names.arg=every.ten)
lmres<-lm(res.all$Sp[every.ten] ~ c(1:100))
abline(lmres, col="red", lty=2, lwd=2)
pt <- prop.test(res.all$P[every.ten], res.all$N[every.ten])
text(expression(paste(chi^2, "=")), x=length(every.ten)/2, y=0.8)
text(round(pt$statistic, 0), x=length(every.ten)/2, y=0.7)
text(expression(paste("p-value =")), x=length(every.ten)/2, y=0.6)
text(signif(pt$p.value, 2), x=length(every.ten)/2, y=0.5)
hundred.by.ten = seq(from=1, to=100, by=10)
acf(res.all$Sp[hundred.by.ten], lag.max = length(res.all$Sp[hundred.by.ten]),
plot=T, main="Autocorrelation every 10 until 100")
barplot2(res.all$Sp[hundred.by.ten], plot.ci=TRUE,
ci.l=res.all$L[hundred.by.ten], ci.u=res.all$U[hundred.by.ten],
ylim=c(0,1), main="Sample every 10 until 100", ci.lty=2, names.arg=hundred.by.ten)
lmres<-lm(res.all$Sp[hundred.by.ten] ~ c(1:10))
abline(lmres, col="red", lty=2, lwd=2)
pt <- prop.test(res.all$P[hundred.by.ten], res.all$N[hundred.by.ten])
text(expression(paste(chi^2, "=")), x=length(hundred.by.ten)/2, y=0.8)
text(round(pt$statistic, 0), x=length(hundred.by.ten)/2, y=0.7)
text(expression(paste("p-value =")), x=length(hundred.by.ten)/2, y=0.6)
text(signif(pt$p.value, 2), x=length(hundred.by.ten)/2, y=0.5)
hundred.by.five = seq(from=1, to=100, by=5)
acf(res.all$Sp[hundred.by.five], lag.max = length(res.all$Sp[hundred.by.five]),
plot=T, main="Autocorrelation every 5 until 100")
barplot2(res.all$Sp[hundred.by.five], plot.ci=TRUE,
ci.l=res.all$L[hundred.by.five], ci.u=res.all$U[hundred.by.five],
ylim=c(0,1), main="Sample every 5 until 100", ci.lty=2, names.arg=hundred.by.five)
lmres<-lm(res.all$Sp[hundred.by.five] ~ c(1:20))
abline(lmres, col="red", lty=2, lwd=2)
pt <- prop.test(res.all$P[hundred.by.five], res.all$N[hundred.by.five])
text(expression(paste(chi^2, "=")), x=length(hundred.by.five)/2, y=0.8)
text(round(pt$statistic, 0), x=length(hundred.by.five)/2, y=0.7)
text(expression(paste("p-value =")), x=length(hundred.by.five)/2, y=0.6)
text(signif(pt$p.value, 2), x=length(hundred.by.five)/2, y=0.5)
pos <- res.all$P[hundred.by.five]
neg <- res.all$N[hundred.by.five] - pos
pt <- prop.test(pos, pos+neg)
t   <- 1:20
mat <- cbind(pos, neg)
mod.glm <- glm(mat ~ as.factor(t), family="binomial")
anova(mod.glm, test="Chisq")
t <- 1:10
seroprev <- res.all$Sp[every.hundred]
lmres<-lm(seroprev ~ t)
lmres2<-gls(seroprev~t, correlation=corAR1())
par(mfrow=c(1,1))
acf(seroprev, lag.max=length(seroprev), plot=T, main="Autocorrelation every 100")
barplot2(seroprev, plot.ci=TRUE,
ci.l=res.all$L[every.hundred], ci.u=res.all$U[every.hundred],
ylim=c(0,1),main="Sample every 100",ci.lty=2, names.arg=every.hundred)
abline(lmres, col="red", lty=2,lwd=2)
abline(lmres2, col="blue")
pt <- prop.test(res.all$P[every.hundred], res.all$N[every.hundred])
text(expression(paste(chi^2, "=")), x=length(every.hundred)/2, y=0.8)
text(round(pt$statistic, 0), x=length(every.hundred)/2, y=0.7)
text(expression(paste("p-value =")), x=length(every.hundred)/2, y=0.6)
text(signif(pt$p.value, 2), x=length(every.hundred)/2, y=0.5)
rm(list=ls())
a <- 5 # mean - use the same one
s <- 2 # sd
num_tests <- 20
n <- 20 # sample size
xsamples <- matrix(rnorm(num_tests * n, mean=a, sd=s), ncol=num_tests)
par(mfrow=c(1,1))
par(oma=c(0.1,1,0.1,0.2))
par(mar=c(2,5,2,2))
boxplot(xsamples, xlim=c(0,num_tests+1), ylab="data", cex.lab=1.5, xlab="sample number")
abline(h=a, col="red")
dev.off()
xbar <- apply(xsamples, 2, mean)
ci   <- apply(xsamples, 2, function(x) { t.test(x)$conf.int })
tiff("mean.tiff", width=8, height=8, units='in', res=300, compression="lzw")
plot(xbar, xlim=c(0,num_tests+1), ylim=range(xsamples), pch=19,
ylab="mean (95% confidence intervals)", cex.lab=1.5, xlab="sample number")
abline(h=a, col="red")
for (i in 1:num_tests)
lines(c(i,i), ci[,i])
pvals <- apply(xsamples, 2, function(x) { t.test(x, mu=a)$p.value })
text(1:num_tests, max(ci)+2, round(pvals, 2), srt=90, cex=1.5)
text(0, max(ci)+2, "p-values", srt=90, cex=1.5)
padj<-p.adjust(pvals, method = "bonferroni", n = length(pvals))
text(1:num_tests, min(ci)-2, round(padj, 2), srt=90, cex=1.5)
text(0, min(ci)-2, "adj. p-values", srt=90, cex=1.5)
dev.off()
tiff("pvals.tiff", width=8, height=8, units='in', res=300, compression="lzw")
par(mfrow=c(6,1))
par(oma=c(1,1,0.1,0.2))
par(mar=c(2,5,2,2))
plot(pvals, ylim=c(0,1), pch=16, xlab="", ylab="p-values", cex.lab=1.5)
abline(h=0.05, lty=2)
plot(padj, ylim=c(0,1), pch=16, xlab="", ylab="Bonferroni", cex.lab=1.5)
abline(h=0.05, lty=2)
padj<-p.adjust(pvals, method = "holm", n = length(pvals))
plot(padj, ylim=c(0,1), pch=16, xlab="", ylab="Holm", cex.lab=1.5)
abline(h=0.05, lty=2)
padj<-p.adjust(pvals, method = "hochberg", n = length(pvals))
plot(padj, ylim=c(0,1), pch=16, xlab="", ylab="Hochberg", cex.lab=1.5)
abline(h=0.05, lty=2)
padj<-p.adjust(pvals, method = "BH", n = length(pvals)) # same as fdr
plot(padj, ylim=c(0,1), pch=16, xlab="", ylab="BH", cex.lab=1.5)
abline(h=0.05, lty=2)
padj<-p.adjust(pvals, method = "BY", n = length(pvals)) # same as fdr
plot(padj, ylim=c(0,1), pch=16, ylab="BY", cex.lab=1.5, xlab="sample number")
abline(h=0.05, lty=2)
dev.off()
rm(list=ls())
library(lme4)
captive=read.csv("Captive_sero_Jul2011.csv", header=T)
head(captive)
levels(captive$Age) <- list(B="Neonate", A="SM", JUV="Juv",SI="SI")
captive$Age = factor(captive$Age,labels=c("Neonate","SM","Juvenile","SIM"))
summary(captive)
captive1=na.omit(captive)
attach(captive1)
names(captive1)
per_group_model <- lmList(LogTitre ~ Days|Age,
data=captive1)
overall_model <- lm(LogTitre ~ -1 + Days*Age, data=captive1)
per_group_model_ranef <- lmer(LogTitre ~ Days + (Days | ID),
data=captive1, subset=Age=="Neonate")
pg_coef.Neonate <- coef(per_group_model_ranef)$ID
per_group_model.Neonate <- c(mean(pg_coef.Neonate$"(Intercept)"), mean(pg_coef.Neonate$Days))
par(mfrow=c(1, 1))
plot(jitter(LogTitre) ~ Days, data=subset(captive1, Age=="Neonate"),
col=ID, main="Neonate")
abline(per_group_model.Neonate, col='black', lwd=3, lty=2)
for (i in 1:13)
{
abline(pg_coef.Neonate[i,1], pg_coef.Neonate[i,2], col=rownames(pg_coef.Neonate)[i])
}
per_group_model_ranef <- lmer(LogTitre ~ Days + (Days | ID),
data=captive1, subset=Age=="SM")
pg_coef.SM <- coef(per_group_model_ranef)$ID
per_group_model.SM <- c(mean(pg_coef.SM$"(Intercept)"), mean(pg_coef.SM$Days))
par(mfrow=c(1, 1))
plot(jitter(LogTitre) ~ Days, data=subset(captive1, Age=="SM"),
col=ID, main="SM")
abline(per_group_model.SM, col='black', lwd=3, lty=2)
for (i in 1:57)
{
abline(pg_coef.SM[i,1], pg_coef.SM[i,2], col=rownames(pg_coef.SM)[i])
}
per_group_model_ranef <- lmer(LogTitre ~ Days + (Days | ID),
data=captive1, subset=Age=="Juvenile")
pg_coef.Juvenile <- coef(per_group_model_ranef)$ID
per_group_model.Juvenile <- c(mean(pg_coef.Juvenile$"(Intercept)"), mean(pg_coef.Juvenile$Days))
par(mfrow=c(1, 1))
plot(jitter(LogTitre) ~ Days, data=subset(captive1, Age=="Juvenile"),
col=ID, main="Juvenile")
abline(per_group_model.Juvenile, col='black', lwd=3, lty=2)
for (i in 1:8)
{
abline(pg_coef.Juvenile[i,1], pg_coef.Juvenile[i,2], col=rownames(pg_coef.Juvenile)[i])
}
per_group_model_ranef <- lmer(LogTitre ~ Days + (Days | ID),
data=captive1, subset=Age=="SIM")
pg_coef.SIM <- coef(per_group_model_ranef)$ID
per_group_model.SIM <- c(mean(pg_coef.SIM$"(Intercept)"), mean(pg_coef.SIM$Days))
par(mfrow=c(1, 1))
plot(jitter(LogTitre) ~ Days, data=subset(captive1, Age=="SIM"),
col=ID, main="SIM")
abline(per_group_model.SIM, col='black', lwd=3, lty=2)
for (i in 1:11)
{
abline(pg_coef.SIM[i,1], pg_coef.SIM[i,2], col=rownames(pg_coef.SIM)[i])
}
detach(captive1)
sd_ind   <- 0.1
sd_grp   <- 0.5
ovr_mean <- 5
num_ind  <- 10
meas_per_ind <- 10
ind_mean <- rnorm(num_ind, mean=ovr_mean, sd=sd_grp)
ind_val  <- matrix(0,num_ind,meas_per_ind)
for (i in 1:num_ind)
{
ind_val[i,] <- rnorm(meas_per_ind, mean=ind_mean[i], sd=sd_ind)
}
x <- data.frame(id=rep(1:num_ind, meas_per_ind),
grp=rep(rep(c("A", "B"), each=num_ind/2), meas_per_ind),
val=as.vector(ind_val))
x <- x[order(x$id),]
summary(lmer(val ~ grp + (1|id), data=x))
summary(lm(val ~ grp, data=x))
rm(list=ls())
library(spatstat)
install.packages("spatstat")
library(spatial)
x <- runif(100)
y <- runif(100)
par(pty="s")
plot(x, y, pch=16)
spat.t<-ppp(x, y, c(0,1), c(0,1))
install.packages("spatstat")
install.packages("spatstat")
library(devtools)
install_github("spatstat/spatstat")
library(devtools)
install_github("/spatstat/spatstat/releases")
library(devtools)
githubinstall("spatstat")
install.packages("githubinstall")
library(devtools)
githubinstall("spatstat")
library(devtools)
install_github("spatstat")
library(devtools)
install_github("spatstat/spatstat")
library(devtools)
install_github("spatstat/spatstat")
library(devtools)
install_github("spatstat/spatstat")
